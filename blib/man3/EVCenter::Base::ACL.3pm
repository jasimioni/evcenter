.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "EVCenter::Base::ACL 3"
.TH EVCenter::Base::ACL 3 "2015-07-15" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
EVCenter::Base::ACL \- Base class to handle EVCenter User ACL (Access Lists)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    $acl = EVCenteR::Base::ACL\->new(dbhost => $dbhost, 
\&                                    dbname => $dbname,
\&                                    dbuser => $dbuser,
\&                                    dbpass => $dbpass,
\&                                    dbport => $dbport,
\&                                    dbopts => $dbopts,
\&                                    dbi_opts => { $dbi_opts },
\&                                    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used to load the \s-1ACL\s0 and the \s-1SQL\s0 Filter associated
to a user. \s-1ACL\s0 and \s-1SQL\s0 Filter are taken from the database structure.
.SH "DATABASE TABLES"
.IX Header "DATABASE TABLES"
\&\fBuc_users\fR
.PP
.Vb 1
\&    Contains the username, filter and filter type of the user
.Ve
.PP
\&\fBuc_roles\fR
.PP
.Vb 1
\&    Contains the rolename, filter and the permissions, in json format
.Ve
.PP
\&\fBuc_groups\fR
.PP
.Vb 1
\&    Contains the group names and details
.Ve
.PP
\&\fBuc_group_members\fR
.PP
.Vb 1
\&    Contains the members of groups, for users and groups (groups member of groups)
.Ve
.PP
\&\fBuc_group_roles\fR
.PP
.Vb 1
\&    Associate one or more roles to a group
.Ve
.PP
\&\fBuc_user_roles\fR
.PP
.Vb 1
\&    Associate one or more roles to a user
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "get_group_roles"
.IX Subsection "get_group_roles"
.Vb 1
\&    $hash_ref = $self\->get_group_roles($groupname);
.Ve
.PP
Returns all roles (by name, on a hash reference) associated directly to \f(CW$groupname\fR
.PP
Each role can have a \f(CW\*(C`filter\*(C'\fR and a \f(CW\*(C`permissions\*(C'\fR key
.SS "get_user_roles"
.IX Subsection "get_user_roles"
.Vb 1
\&    $hash_ref = $self\->get_user_roles($username);
.Ve
.PP
Returns all roles (by name, on a hash reference) associated directly to \f(CW$username\fR
.PP
Each role can have a \f(CW\*(C`filter\*(C'\fR and a \f(CW\*(C`permissions\*(C'\fR key
.SS "get_group_tree"
.IX Subsection "get_group_tree"
Create an \s-1HASH\s0 with the group tree, based on a leaf group. Will get all parent groups
of the group and for each their parents.
.PP
Also, will return the roles associated to each group.
.SS "get_user_group_tree"
.IX Subsection "get_user_group_tree"
.Vb 1
\&    $self\->dump_user_group_tree($username);
.Ve
.PP
Returns the group structure of user \f(CW$username\fR, with it's roles
.SS "get_user_groups"
.IX Subsection "get_user_groups"
.Vb 1
\&    @user_groups = $self\->get_user_groups($username);
.Ve
.PP
Get the groups \f(CW$username\fR belongs to (directly).
.SS "get_all_user_groups"
.IX Subsection "get_all_user_groups"
.Vb 1
\&    @user_groups = $self\->get_all_user_groups($username);
.Ve
.PP
Get the groups \f(CW$username\fR belongs to, including the parent groups
from the groups it belongs to.
.SS "get_parent_groups"
.IX Subsection "get_parent_groups"
.Vb 1
\&    @parent_groups = $self\->get_parent_groups($groupname);
.Ve
.PP
Returns the groups \f(CW$groupname\fR is a member of.
.SS "get_permissions"
.IX Subsection "get_permissions"
.Vb 1
\&    $acl = $self\->get_permissions($username);
.Ve
.PP
Will return the complete \s-1ACL\s0 for a user, based on:
.PP
Permissions from roles directly attached to user.
Permissions from roles of groups the user belongs to (directly)
Permissions from roles of groups of groups (group tree)
.SS "calculate_permissions"
.IX Subsection "calculate_permissions"
\&\f(CW\*(C`calculate_permissions\*(C'\fR will get the output from \f(CW\*(C`$self\-\*(C'\fRget_permissions_from_groups>
or from \f(CW\*(C`$self\-\*(C'\fRget_permissions_from_user_roles> and generate an array with 
the list of Grants and Revokes, in the sequence
they must be executed. Remembering that Revokes will occur before Grants
and that most specific roles (from nearer groups) will be processed later.
.PP
Also, sibling roles will have the grants and revokes grouped and all revokes
will happen, then all grants.
.PP
Output in the form:
.PP
.Vb 4
\&    ( 
\&        [ \*(Aqgrant|revoke\*(Aq ] => [ { \*(Aqobject1\*(Aq => \*(Aqpermission1\*(Aq }, { \*(Aqobject2\*(Aq => \*(Aqpermission2\*(Aq } ],
\&        [ \*(Aqgrant|revoke\*(Aq ] => [ { \*(Aqobject3\*(Aq => \*(Aqpermission3\*(Aq }, { \*(Aqobject4\*(Aq => \*(Aqpermission4\*(Aq } ]
\&    )
.Ve
.SS "get_permissions_from_groups"
.IX Subsection "get_permissions_from_groups"
.Vb 1
\&    $self\->get_permissions_from_groups([ group_list ]);
.Ve
.PP
This will navigate the database structure, getting all permissions
(grants and revokes) associated with the group tree, initiating in the
group list given.
.PP
The return of this method is suitable for the \f(CW\*(C`calculate_permissions\*(C'\fR 
method which will set all the authorization levels for the current user.
.SS "get_permissions_from_user_roles"
.IX Subsection "get_permissions_from_user_roles"
.Vb 1
\&    $self\->get_permissions_from_user_roles($username);
.Ve
.PP
Returns the permissions from roles associated directly to \f(CW$username\fR
.PP
The return of this method is suitable for the \f(CW\*(C`calculate_permissions\*(C'\fR 
method which will set all the authorization levels for the current user.
.SS "get_filter"
.IX Subsection "get_filter"
.Vb 1
\&    $sql_filter = $self\->get_filter($username);
.Ve
.PP
Returns the \s-1SQL\s0 Filter to restrict the queries from \f(CW$username\fR.
.PP
It will consider:
.PP
1. The filter attached directly to the user, considering the rules
to replace, expand (\s-1OR\s0) or restrict (\s-1AND\s0).
.PP
2. The filters associated with roles attached directly to the user. 
The filters from all roles are ORed.
.PP
3. The filters associated with roles attached to groups the user belongs to.
Filters from sibling groups are ORed and filters from Parent groups are ANDed
.SS "get_filter_from_groups"
.IX Subsection "get_filter_from_groups"
.Vb 1
\&    $self\->get_filter_from_groups([ group_list ]);
.Ve
.PP
This method will generate an array with the resulting filter from the group
tree associated with 'groups'. Remembering that sibling groups / roles have
their filters ORed and vertical association (parent groups) have their filters
ANDed.
.SS "get_filter_from_user_roles"
.IX Subsection "get_filter_from_user_roles"
.Vb 1
\&    $self\->get_filter_from_user_roles($username);
.Ve
.PP
Returns the filters associated to roles directly attached to a user, ORed.
.SS "get_filter_from_user"
.IX Subsection "get_filter_from_user"
.Vb 1
\&    $self\->get_filter_from_user($username);
.Ve
.PP
Gets the filter directly attached to a user and it's rule (expand, restrict or replace)
.SS "get_ui_filters"
.IX Subsection "get_ui_filters"
.Vb 1
\&    $hash_ref = $self\->get_ui_filters($username)
.Ve
.PP
Returns a hash reference with the filters available at the User Interface.
.PP
3 Types of filters exists:
.IP "Global: Everyone can select" 4
.IX Item "Global: Everyone can select"
.PD 0
.IP "Group:  Only members of the group can select" 4
.IX Item "Group:  Only members of the group can select"
.IP "User:   Only the owner can select" 4
.IX Item "User:   Only the owner can select"
.PD
.SS "get_ui_views"
.IX Subsection "get_ui_views"
.Vb 1
\&    $hash_ref = $self\->get_ui_views($username)
.Ve
.PP
Returns a hash reference with the views available at the User Interface.
.PP
3 Types of filters exists:
.IP "Global: Everyone can select" 4
.IX Item "Global: Everyone can select"
.PD 0
.IP "Group:  Only members of the group can select" 4
.IX Item "Group:  Only members of the group can select"
.IP "User:   Only the owner can select" 4
.IX Item "User:   Only the owner can select"
.PD
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 560:" 4
.IX Item "Around line 560:"
\&'=item' outside of any '=over'
.IP "Around line 599:" 4
.IX Item "Around line 599:"
You forgot a '=back' before '=head2'
.IP "Around line 607:" 4
.IX Item "Around line 607:"
\&'=item' outside of any '=over'
