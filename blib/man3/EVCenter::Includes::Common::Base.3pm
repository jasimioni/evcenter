.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "EVCenter::Includes::Common::Base 3"
.TH EVCenter::Includes::Common::Base 3 "2015-07-15" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Variables"
.IX Header "Variables"
The exported variables are \f(CW$data\fR, \f(CW$event\fR, \f(CW$action\fR, \f(CW$mstash\fR and \f(CW$cstash\fR.
All of them are Hash References.
.ie n .SS "$data"
.el .SS "\f(CW$data\fP"
.IX Subsection "$data"
This is the raw data, as received by the EVCenter::Core Webservice
.ie n .SS "$event"
.el .SS "\f(CW$event\fP"
.IX Subsection "$event"
This is the event that is going to be inserted into the database.
.ie n .SS "$action"
.el .SS "\f(CW$action\fP"
.IX Subsection "$action"
This is the list of known actions. Each module should have one
before, after and process actions. Other actions can be created
and called using call_action('action_name', \f(CW@params\fR)
.ie n .SS "$cstash"
.el .SS "\f(CW$cstash\fP"
.IX Subsection "$cstash"
This is the common stash. It's shared by all modules. Use it to
save lookups. Remember to populate it from \f(CW$action\fR\->{onload}.
.PP
Also, one day the stashes should go to memcache, so they are shared
by processes and even between servers.
.ie n .SS "$mstash"
.el .SS "\f(CW$mstash\fP"
.IX Subsection "$mstash"
This is the module stash.
.ie n .SH "$action\->{before}"
.el .SH "\f(CW$action\fP\->{before}"
.IX Header "$action->{before}"
For every event received, the following
actions will be called, in order:
.PP
.Vb 5
\&    ${Common::action}\->{before};
\&    ${Module::action}\->{before};
\&    ${Module::action}\->{process};
\&    ${Module::action}\->{after};
\&    ${Common::action}\->{after};
.Ve
.ie n .SH "$action\->{after}"
.el .SH "\f(CW$action\fP\->{after}"
.IX Header "$action->{after}"
The code that will be run after the main processing
